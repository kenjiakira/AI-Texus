const os = require('os');
const util = require('util');
const execPromise = util.promisify(require('child_process').exec);
const { sendMessage } = require('../handles/sendMessage');

let commandCount = 0;
const botStartTime = Date.now();

module.exports = {
    name: "uptime",
    description: "Hi·ªÉn th·ªã tr·∫°ng th√°i h·ªá th·ªëng c·ªßa bot.",
    usage: "uptime",
    author: "H·ªá th·ªëng",
    usedby: 2,
    cooldown: 0,
    async execute(senderId, args, pageAccessToken, sendMessage, isAdmin) {
        if (!isAdmin) {
            return sendMessage(senderId, { text: "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p l·ªánh n√†y." }, pageAccessToken);
        }

        commandCount++;

        let currentTime = Date.now();
        let uptime = currentTime - botStartTime;
        let seconds = Math.floor((uptime / 1000) % 60);
        let minutes = Math.floor((uptime / (1000 * 60)) % 60);
        let hours = Math.floor((uptime / (1000 * 60 * 60)) % 24);
        let days = Math.floor(uptime / (1000 * 60 * 60 * 24));

        let memoryUsage = process.memoryUsage().heapUsed / 1024 / 1024; 
        let cpuLoad = os.loadavg()[0].toFixed(2); 

        const systemInfo = await getSystemInfo();
        const nodeVersion = await getNodeVersion();
        const systemUptime = await getSystemUptime();

        let uptimeMessage = `‚è±Ô∏è BOT UPTIME\n`;
        uptimeMessage += `=======================\n`;
        uptimeMessage += `üïí Th·ªùi gian online: ${days} ng√†y, ${hours} gi·ªù, ${minutes} ph√∫t, ${seconds} gi√¢y\n`;
        uptimeMessage += `üñ•Ô∏è Th·ªùi gian h·ªá ƒëi·ªÅu h√†nh ƒë√£ ho·∫°t ƒë·ªông: ${systemUptime}\n`;
        uptimeMessage += `=======================\n`;
        uptimeMessage += `üìä S·ªë l·ªánh ƒë√£ th·ª±c thi: ${commandCount}\n`;
        uptimeMessage += `üíæ B·ªô nh·ªõ s·ª≠ d·ª•ng: ${memoryUsage.toFixed(2)} MB\n`;
        uptimeMessage += `‚öôÔ∏è CPU Load: ${cpuLoad}%\n`;
        uptimeMessage += `=======================\n`;
        uptimeMessage += `üñ•Ô∏è H·ªá ƒëi·ªÅu h√†nh: ${systemInfo.platform} (${systemInfo.arch})\n`;
        uptimeMessage += `- Phi√™n b·∫£n: ${systemInfo.release}\n`;
        uptimeMessage += `- T√™n m√°y: ${systemInfo.hostname}\n`;
        uptimeMessage += `- CPU Model: ${systemInfo.cpuModel} (${systemInfo.coreCount} core(s), ${systemInfo.cpuSpeed} MHz)\n`;
        uptimeMessage += `- T·∫£i CPU: ${systemInfo.loadAverage.join(', ')}\n`;
        uptimeMessage += `- Dung l∆∞·ª£ng b·ªô nh·ªõ: ${systemInfo.totalMemory} GB\n`;
        uptimeMessage += `- B·ªô nh·ªõ c√≤n l·∫°i: ${systemInfo.freeMemory} GB\n`;
        uptimeMessage += `- B·ªô nh·ªõ ƒë√£ s·ª≠ d·ª•ng: ${systemInfo.usedMemory} GB\n`;
        uptimeMessage += `=======================\n`;
        uptimeMessage += `üî¢ Node.js Version: ${nodeVersion}\n`;

        return sendMessage(senderId, { text: uptimeMessage }, pageAccessToken);
    }
};

async function getSystemInfo() {
    try {
        const platform = os.platform();
        const release = os.release();
        const arch = os.arch();
        const hostname = os.hostname();
        const cpuModel = os.cpus()[0].model;
        const coreCount = os.cpus().length;
        const cpuSpeed = os.cpus()[0].speed;
        const loadAverage = os.loadavg();
        const totalMemory = (os.totalmem() / (1024 * 1024 * 1024)).toFixed(2);
        const freeMemory = (os.freemem() / (1024 * 1024 * 1024)).toFixed(2);
        const usedMemory = (totalMemory - freeMemory).toFixed(2);

        return {
            platform,
            release,
            arch,
            hostname,
            cpuModel,
            coreCount,
            cpuSpeed,
            loadAverage,
            totalMemory,
            freeMemory,
            usedMemory
        };
    } catch {
        return {
            platform: 'N/A',
            release: 'N/A',
            arch: 'N/A',
            hostname: 'N/A',
            cpuModel: 'N/A',
            coreCount: 'N/A',
            cpuSpeed: 'N/A',
            loadAverage: 'N/A',
            totalMemory: 'N/A',
            freeMemory: 'N/A',
            usedMemory: 'N/A'
        };
    }
}

async function getNodeVersion() {
    try {
        const { stdout } = await execPromise('node -v');
        return stdout.trim();
    } catch {
        return 'N/A';
    }
}

async function getSystemUptime() {
    const sysUptimeDays = Math.floor(os.uptime() / (60 * 60 * 24));
    const sysUptimeHours = Math.floor((os.uptime() % (60 * 60 * 24)) / (60 * 60));
    const sysUptimeMinutes = Math.floor((os.uptime() % (60 * 60)) / 60);
    const sysUptimeSeconds = Math.floor(os.uptime() % 60);
    return `${sysUptimeDays} ng√†y, ${sysUptimeHours} gi·ªù, ${sysUptimeMinutes} ph√∫t, ${sysUptimeSeconds} gi√¢y`;
}
